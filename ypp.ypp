%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM				/* symbol */
%token <o> I K S T Z		/* combinators: I K S T Z */
%token <o> L R				/* brackets: ( ) */
%token <o> EOL				/* end of line marker */
%type <o> ex
%%
REPL	:
		| REPL EOL		/* required for @-omitted: end line marker */
		| REPL ex 		{ cout << $2->eval()->dump()
							<< "\n========================\n"; } ;
ex		: SYM
		| ex ex			{ $$=new App($1,$2); }
		| L ex R		{ $$=new LR($2); }
		| I ex			{ $$=$1; $$->push($2); }
		| K ex ex		{ $$=$1; $$->push($2); $$->push($3); }
		| S ex ex ex	{ $$=$1; $$->push($2); $$->push($3); $$->push($4); }
;
%%

